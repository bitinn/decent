{"name":"Decent","tagline":"A redis-based job queue for Node: job queue is hard, so we make it decent for you.","body":"\r\ndecent\r\n======\r\n\r\nJob queue is hard, so we make it decent for you.\r\n\r\n`decent` is a Redis-based job queue for Node.\r\n\r\n[![Build Status](https://travis-ci.org/bitinn/decent.svg?branch=master)](https://travis-ci.org/bitinn/decent) [![Coverage Status](https://img.shields.io/coveralls/bitinn/decent.svg)](https://coveralls.io/r/bitinn/decent)\r\n\r\n\r\n# Motivation\r\n\r\nDespite efforts from brilliant developers, a reliable job queue using node.js and redis is still somewhat of a mythical beast. And no wonder: redis isn't a queueing system by nature and node.js isn't known for superior error handling; add concurrency into the mix and you got a leaky pipeline that's almost impossible to debug.\r\n\r\nIn short, we need better groundwork before we can harness the power of queue. Hence the birth of `decent`: we want a library that provides solid building blocks for complex pipelines, so we can safely enjoy what job queue has to offer.\r\n\r\n\r\n# Features\r\n\r\n- Simple API and helpers, powered by `Promise`.\r\n- Full code coverage is a basic requirement, on average at least 3 test cases for each API, and we put extra emphasis on negative tests, because that's where most queue fall and cause headaches.\r\n- Annotated source code, less than 1,000 loc in total.\r\n- No dependency besides `redis` driver, make use of native promise whenever possible, fallback to `bluebird` for older Node release.\r\n- Rich event to aid automation, monitoring and building larger pipeline.\r\n\r\n\r\n# Install\r\n\r\n`npm install decent --save`\r\n\r\n\r\n# API\r\n\r\n\r\n## decent(name, opts)\r\n\r\nCreate a queue with `name` and config redis client connection based on `opts`, returns a decent queue instance.\r\n\r\n### examples\r\n\r\n```\r\nvar decent = require('decent');\r\n\r\nvar q1 = decent('test');\r\nvar q2 = decent('test', { port: 6379, host: 'localhost', connect_timeout: 5000 });\r\n```\r\n\r\n### opts\r\n\r\n- `port`: redis server port, default to `6379`\r\n- `host`: redis server host, default to `'127.0.0.1'`\r\n- `blockTimeout`: how long should client wait for next job (see redis document on blocking command, such as [BLPOP](http://redis.io/commands/BLPOP)), defaults to `30` seconds, `0` to block forever.\r\n- `maxRetry`: how many retries a job can have before moving to failure queue, defaults to `3`, `0` to disable retry.\r\n- and all [redis client options](https://github.com/mranney/node_redis#rediscreateclient).\r\n\r\n\r\n## queue.add(data, opts)\r\n\r\nCreate a job on queue using `data` as payload and allows job specific `opts`, returns a promise that resolve to the created job.\r\n\r\n### examples\r\n\r\n```\r\nqueue.add({ a: 1 }).then(function(job) {\r\n\tconsole.log(job.data); // { a: 1 }\r\n});\r\n\r\nqueue.add({ a: 1, b: 1 }, { retry: 1, timeout: 120 }).then(function(job) {\r\n\tconsole.log(job); // { a: 1, b: 1 }\r\n});\r\n```\r\n\r\n### opts\r\n\r\n- `retry`: default to `0`\r\n- `timeout`: default to `60` seconds\r\n\r\n### job\r\n\r\n- `id`: job id\r\n- `data`: payload\r\n- `retry`: retry count\r\n- `timeout`: worker timeout (not currently used)\r\n\r\n\r\n## queue.worker(handler)\r\n\r\nRegister a handler function that process jobs, and start processing items in queue.\r\n\r\n### examples\r\n\r\n```\r\nqueue.worker(function(job) {\r\n\tconsole.log(job);\r\n});\r\n```\r\n\r\n\r\n## queue.count(name)\r\n\r\nReturns a promise that resolve to the queue length of specified queue, default to `work` queue.\r\n\r\n### examples\r\n\r\n```\r\nqueue.count('work').then(function(count) {\r\n\tconsole.log(count); // pending jobs\r\n});\r\n\r\nqueue.count('run').then(function(count) {\r\n\tconsole.log(count); // running jobs\r\n});\r\n\r\nqueue.count('fail').then(function(count) {\r\n\tconsole.log(count); // failed jobs\r\n});\r\n```\r\n\r\n\r\n## queue.get(id)\r\n\r\nReturns a promise that resolve to the job itself.\r\n\r\n### examples\r\n\r\n```\r\nqueue.get(1).then(function(job) {\r\n\tconsole.log(job.id); // 1\r\n});\r\n```\r\n\r\n\r\n# Events\r\n\r\n`decent` is also an instance of `EventEmitter`, so you can use `queue.on('event', func)` to listen for events as usual.\r\n\r\n## redis client related\r\n\r\n- `queue.emit('client ready')`: client is ready. (redis client has buffer built-in, so this event is emitted as soon as redis client is started)\r\n- `queue.emit('client error', err)`: client connection error.\r\n- `queue.emit('client close')`: client connection has been closed.\r\n- `queue.emit('client pressure', number)`: pending number of commands to run on server, useful for rate limiting.\r\n\r\n## queue worker related\r\n\r\n- `queue.emit('queue ok', job)`: queue worker has processed a `job`.\r\n- `queue.emit('queue error', err)`: queue worker has failed to processed a job and thrown `err`.\r\n- `queue.emit('queue exit', err)`: queue has terminated due to `err`.\r\n- `queue.emit('queue stop')`: queue has stopped gracefully.\r\n\r\n## queue client related\r\n\r\n- `queue.emit('add ok', job)`: `job` has been added to queue.\r\n- `queue.emit('add error', err)`: failed to add job onto queue due to `err`.\r\n\r\n\r\n# Development\r\n\r\n```\r\nnpm install\r\nnpm test\r\n```\r\n\r\n# Future plan\r\n\r\n- API for handling failed jobs\r\n- Use-case examples\r\n- Web UI\r\n\r\n# License\r\n\r\nMIT\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}